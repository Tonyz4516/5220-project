source("http://bit.ly/sentiment_required_packages")
load_package("caret")
load("../data_clean/step3.rda")
category = read.xlsx("../data_clean/variable_identification.xlsx")
set.seed(12345)
orders = sample(1:8000,8000)
voter_train = voter[orders[1:6400],]
voter_test = voter[orders[6401:8000],]
load_package("Hmisc")
# impute with random value
voter_train = apply(voter_train, 2,
function(x) Hmisc::impute(x, 'random'))
voter_train = as.data.frame(voter_train, stringsAsFactors = F)
load_package(c("randomForest", "caret", "e1071"))
# result is presvote16post_2016
# grid search
# grid1 = rep(NA, 15)
# grid2 = rep(NA, 15)
# count = 1
# m = c(20,30,40,50,60)
# tree_size = c(10,20,30)
# for (i in 1:5) {
#     for (j in 1:3){
#        grid1[count] = m[i]
#        grid2[count] = tree_size[j]
#        count = count + 1
#     }
# }
# grid = as.data.frame(matrix(c(grid1, grid2), ncol = 2))
# colnames(grid) = c("m", "ntrees")
# ordinal and contious variables
col_num = which(category$category %in% c("1.0", "3.0"))
for (i in 1:length(col_num)) {
if (sum(is.na(as.numeric(voter_train[,col_num[i]]))) == 0) {
voter_train[,col_num[i]] =
as.numeric(voter_train[,col_num[i]])
} else {
# if convert failed, it is not numeric
col_num[i] = NA
}
}
col_num = col_num[!is.na(col_num)]
# convert factor
count = 1
drop_col = rep(NA, 200)
col_fac = which(! 1:ncol(voter_train) %in% col_num)
# View(voter_train[1:100, col_fac])
for (i in 1:length(col_fac)) {
voter_train[,col_fac[i]] = as.factor(voter_train[,col_fac[i]])
if (length(levels(voter_train[,col_fac[i]])) <= 1) {
drop_col[count] = col_fac[i]
count = count + 1
}
}
drop_col = drop_col[!is.na(drop_col)]
voter_train = voter_train[,-drop_col]
voter_train = voter_train[,-c(1:2)]
r = as.character(voter_train$presvote16post_2016)
r = ifelse(r %in% c("donald trump", "hillary clinton"), r, "others")
voter_train$presvote16post_2016 = as.factor(r)
voter_test = apply(voter_test, 2,
function(x) Hmisc::impute(x, 'random'))
voter_test = as.data.frame(voter_test, stringsAsFactors = F)
for (i in 1:length(col_num)) {
voter_test[,col_num[i]] =
as.numeric(voter_test[,col_num[i]])
}
for (i in 1:length(col_fac)) {
voter_test[,col_fac[i]] = as.factor(voter_test[,col_fac[i]])
}
voter_test = voter_test[,-drop_col]
voter_test = voter_test[,-c(1:2)]
r1 = as.character(voter_test$presvote16post_2016)
r1 = ifelse(r1 %in% c("donald trump", "hillary clinton"),
r1, "others")
voter_test$presvote16post_2016 = as.factor(r1)
save(voter_train, voter_test, file = "rf_d.rda")
load("../3_random_forest_Tony/rf_d.rda")
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
top_20 %in% colnames(voter_train)
cols = which(colnames(voter_train) %in% top_20)
cols = which(colnames(voter_train) == top_20)
cols = which(colnames(voter_train) %in% top_20)
c = 1
for (i in 1:ncol(voter_train)) {
if (colnames(voter_train)[i] %in% top_20){
print(c)
c = c + 1
}
}
for (i in 1:ncol(voter_train)) {
if (colnames(voter_train)[i] %in% top_20){
print(i)
}
}
top_20
which(colnames(voter_train) == "presvote16post_2016")
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
col = c(col,3)
voter_tr = voter_train[,col]
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
cols = c(cols,3)
voter_tr = voter_train[,col]
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
cols = c(cols,3)
voter_tr = voter_train[,cols]
voter_te = voter_test[,cols]
a = as.character(voter_tr$presvote16post_2016)
unique(a)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a = ifelse(a == "donald trump", 1, 0)
b = ifelse(b == "donald trump", 1, 0)
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
colnames(voter_tr)
x = as.matrix(voter_tr[,c(1:17)])
y = as.matrix(voter_tr[,18])
fit = glmnet(x,y)
load_package("glmnet")
fit = glmnet(x,y)
?glmnet
x = as.matrix(voter_tr[,c(1:17)])
y = voter_tr[,18]
fit = glmnet(x,y)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a = ifelse(a == "donald trump", 1, 0)
b = ifelse(b == "donald trump", 1, 0)
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = b
x = as.matrix(voter_tr[,c(1:17)])
y = voter_tr[,18]
fit = glmnet(x,y)
?glm
x = as.matrix(voter_tr[,c(1:17)])
y = voter_tr[,18]
fit = glm(presvote16post_2016~.)
x = as.matrix(voter_tr[,c(1:17)])
y = voter_tr[,18]
fit = glm(presvote16post_2016~., data = voter_tr)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a = ifelse(a == "donald trump", 1, 0)
b = ifelse(b == "donald trump", 1, 0)
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
x = as.matrix(voter_tr[,c(1:17)])
y = voter_tr[,18]
fit = glm(presvote16post_2016~., data = voter_tr)
fit = glm(presvote16post_2016~., data = voter_tr)
str(voter_tr)
fit = glm(presvote16post_2016~., data = voter_tr, family = "binomial")
fit
fit = glm(presvote16post_2016~., data = voter_tr,
family = binomial(“logit”), maxit = 100)
fit = glm(presvote16post_2016~., data = voter_tr,
family = binomial("logit"), maxit = 100)
coef(fit)
print(coef(fit))
?predict
predict(fit, voter_te)
y <- predict(fit, voter_te)
y = predict(fit, voter_te)
y = predict(fit, voter_te)
y
fit = glm(presvote16post_2016~., data = voter_tr,
family=binomial(link="logit"))
fit = glm(presvote16post_2016~., data = voter_tr,
family=binomial(link="logit"), maxit = 1000)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a = ifelse(a == "donald trump", 1, 0)
b = ifelse(b == "donald trump", 1, 0)
voter_tr$presvote16post_2016 = a
voter_te$presvote16post_2016 = as.factor(b)
fit = glm(presvote16post_2016~., data = voter_tr,
family=binomial(link="logit"), maxit = 1000)
?glmnet
fit = glmnet(x,y,family="binomial")
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a = ifelse(a == "donald trump", 1, 0)
b = ifelse(b == "donald trump", 1, 0)
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
# fit = glm(presvote16post_2016~., data = voter_tr,
#            family=binomial(link="logit"), maxit = 1000)
x = voter_tr[,1:17]
y = voter_tr[,18]
fit = glmnet(x,y,family="binomial")
# fit = glm(presvote16post_2016~., data = voter_tr,
#            family=binomial(link="logit"), maxit = 1000)
x = as.matrix(voter_tr[,1:17])
y = as.matrix(voter_tr[,18])
fit = glmnet(x,y,family="binomial")
str(y)
sum(y)
sum(as.numeric(y))
which(voter_tr$presvote16post_2016 == "donald trump")
unique(voter_tr$presvote16post_2016)
load("../3_random_forest_Tony/rf_d.rda")
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
cols = c(cols,3)
voter_tr = voter_train[,cols]
voter_te = voter_test[,cols]
unique(voter_tr$presvote16post_2016)
a = as.character(voter_tr$presvote16post_2016)
unique(a)
which(a == "donald trump")
which(a != "donald trump")
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a[which(a != "donald trump")] = 0
b[which(b != "donald trump")] = 0
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
sum(a)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a[which(a != "donald trump")] = 0
a[which(a == "donald trump")] = 1
b[which(b != "donald trump")] = 0
b[which(b == "donald trump")] = 1
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
load("../3_random_forest_Tony/rf_d.rda")
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
cols = c(cols,3)
voter_tr = voter_train[,cols]
voter_te = voter_test[,cols]
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a[which(a != "donald trump")] = 0
a[which(a == "donald trump")] = 1
b[which(b != "donald trump")] = 0
b[which(b == "donald trump")] = 1
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
sum(a)
sum(as.numeric(a))
sum(as.numeric(b))
fit = glm(presvote16post_2016~., data = voter_tr,
family=binomial(link="logit"), maxit = 1000)
# x = as.matrix(voter_tr[,1:17])
# y = as.matrix(voter_tr[,18])
#
# fit = glmnet(x,y,family="binomial")
print(coef(fit))
x <-replicate(10000, list(rnorm(24)) )  # list length 10000
library(zoo)
library(parallel)
system.time({
tmpp = lapply(x, function(x) {
rollmean(x, 7)
})
})
system.time({
tmpp = mclapply(x, mc.cores=8, function(z) {
rollmean(z, 7)
})
})
str(voter_trr)
str(voter_tr)
apply(voter_tr,2,function(x) if(is.factor(x)) return(levels(x)))
for (i in 1:17) {
if (is.factor(voter_tr[,i])){
print(levels(voter_tr[,i]))
}
}
# fix the factor issue
voter_tr$policies_favor_2016 =
as.numeric(voter_tr$policies_favor_2016)
voter_te$policies_favor_2016 =
as.numeric(voter_te$policies_favor_2016)
voter_tr$obamaapp_baseline_2016 =
as.numeric(voter_tr$obamaapp_baseline)
voter_te$obamaapp_baseline_2016 =
as.numeric(voter_te$obamaapp_baseline_2016)
load("../3_random_forest_Tony/rf_d.rda")
# 20 most important vars after fixing
top_20 = readLines("top_20.txt")
cols = which(colnames(voter_train) %in% top_20)
cols = c(cols,3)
voter_tr = voter_train[,cols]
voter_te = voter_test[,cols]
# fix the factor issue
voter_tr$policies_favor_2016 =
as.numeric(voter_tr$policies_favor_2016)
voter_te$policies_favor_2016 =
as.numeric(voter_te$policies_favor_2016)
voter_tr$obamaapp_baseline =
as.numeric(voter_tr$obamaapp_baseline)
voter_te$obamaapp_baseline =
as.numeric(voter_te$obamaapp_baseline)
a = as.character(voter_tr$presvote16post_2016)
b = as.character(voter_te$presvote16post_2016)
a[which(a != "donald trump")] = 0
a[which(a == "donald trump")] = 1
b[which(b != "donald trump")] = 0
b[which(b == "donald trump")] = 1
voter_tr$presvote16post_2016 = as.factor(a)
voter_te$presvote16post_2016 = as.factor(b)
fit = glm(presvote16post_2016~., data = voter_tr,
family=binomial(link="logit"), maxit = 1000)
# x = as.matrix(voter_tr[,1:17])
# y = as.matrix(voter_tr[,18])
#
# fit = glmnet(x,y,family="binomial")
print(coef(fit))
sink("logit_results.txt")
print(coef(fit))
sink()
y_hat = predict(fit, voter_te)
y_hat
summary(fit)
sink("fit_sum.txt")
summary(fit)
sink()
getwd()
load("../../Downloads/yelp_dataset/review_w_sent.rda")
load("../../../Downloads/yelp_dataset/review_w_sent.rda")
# load required packages
source("http://bit.ly/sentiment_required_packages")
?anova
class(review$stars)
review$stars <- as.factor(review$stars)
res.aov <- aov(sentiment_score ~ stars, data = review)
summary(res.aov)
